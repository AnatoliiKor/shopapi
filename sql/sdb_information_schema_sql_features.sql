INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B011', 'Embedded Ada', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B012', 'Embedded C', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B013', 'Embedded COBOL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B014', 'Embedded Fortran', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B015', 'Embedded MUMPS', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B016', 'Embedded Pascal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B017', 'Embedded PL/I', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B021', 'Direct SQL', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B031', 'Basic dynamic SQL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B032', 'Extended dynamic SQL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B032', 'Extended dynamic SQL', '01', '<describe input statement>', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B033', 'Untyped SQL-invoked function arguments', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B034', 'Dynamic specification of cursor attributes', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B035', 'Non-extended descriptor names', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B041', 'Extensions to embedded SQL exception declarations', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B051', 'Enhanced execution rights', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B111', 'Module language Ada', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B112', 'Module language C', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B113', 'Module language COBOL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B114', 'Module language Fortran', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B115', 'Module language MUMPS', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B116', 'Module language Pascal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B117', 'Module language PL/I', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B121', 'Routine language Ada', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B122', 'Routine language C', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B123', 'Routine language COBOL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B124', 'Routine language Fortran', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B125', 'Routine language MUMPS', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B126', 'Routine language Pascal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B127', 'Routine language PL/I', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B128', 'Routine language SQL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B200', 'Polymorphic table functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B201', 'More than one PTF generic table parameter', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B202', 'PTF Copartitioning', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B203', 'More than one copartition specification', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B204', 'PRUNE WHEN EMPTY', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B205', 'Pass-through columns', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B206', 'PTF descriptor parameters', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B207', 'Cross products of partitionings', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B208', 'PTF component procedure interface', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B209', 'PTF extended names', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B211', 'Module language Ada: VARCHAR and NUMERIC support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('B221', 'Routine language Ada: VARCHAR and NUMERIC support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '01', 'INTEGER and SMALLINT data types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '02', 'REAL, DOUBLE PRECISION, and FLOAT data types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '03', 'DECIMAL and NUMERIC data types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '04', 'Arithmetic operators', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '05', 'Numeric comparison', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E011', 'Numeric data types', '06', 'Implicit casting among the numeric data types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character data types', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '01', 'CHARACTER data type', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '02', 'CHARACTER VARYING data type', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '03', 'Character literals', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '04', 'CHARACTER_LENGTH function', 'YES', null, 'trims trailing spaces from CHARACTER values before counting');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '05', 'OCTET_LENGTH function', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '06', 'SUBSTRING function', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '07', 'Character concatenation', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '08', 'UPPER and LOWER functions', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '09', 'TRIM function', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '10', 'Implicit casting among the character string types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '11', 'POSITION function', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E021', 'Character string types', '12', 'Character comparison', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E031', 'Identifiers', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E031', 'Identifiers', '01', 'Delimited identifiers', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E031', 'Identifiers', '02', 'Lower case identifiers', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E031', 'Identifiers', '03', 'Trailing underscore', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '01', 'SELECT DISTINCT', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '02', 'GROUP BY clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '04', 'GROUP BY can contain columns not in <select list>', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '05', 'Select list items can be renamed', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '06', 'HAVING clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '07', 'Qualified * in select list', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '08', 'Correlation names in the FROM clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E051', 'Basic query specification', '09', 'Rename columns in the FROM clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '01', 'Comparison predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '02', 'BETWEEN predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '03', 'IN predicate with list of values', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '04', 'LIKE predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '05', 'LIKE predicate ESCAPE clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '06', 'NULL predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '07', 'Quantified comparison predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '08', 'EXISTS predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '09', 'Subqueries in comparison predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '11', 'Subqueries in IN predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '12', 'Subqueries in quantified comparison predicate', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '13', 'Correlated subqueries', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E061', 'Basic predicates and search conditions', '14', 'Search condition', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '01', 'UNION DISTINCT table operator', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '02', 'UNION ALL table operator', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '03', 'EXCEPT DISTINCT table operator', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '05', 'Columns combined via table operators need not have exactly the same data type', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E071', 'Basic query expressions', '06', 'Table operators in subqueries', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '01', 'SELECT privilege', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '02', 'DELETE privilege', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '03', 'INSERT privilege at the table level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '04', 'UPDATE privilege at the table level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '05', 'UPDATE privilege at the column level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '06', 'REFERENCES privilege at the table level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '07', 'REFERENCES privilege at the column level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '08', 'WITH GRANT OPTION', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '09', 'USAGE privilege', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E081', 'Basic Privileges', '10', 'EXECUTE privilege', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '01', 'AVG', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '02', 'COUNT', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '03', 'MAX', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '04', 'MIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '05', 'SUM', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '06', 'ALL quantifier', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E091', 'Set functions', '07', 'DISTINCT quantifier', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E101', 'Basic data manipulation', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E101', 'Basic data manipulation', '01', 'INSERT statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E101', 'Basic data manipulation', '03', 'Searched UPDATE statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E101', 'Basic data manipulation', '04', 'Searched DELETE statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E111', 'Single row SELECT statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '01', 'DECLARE CURSOR', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '02', 'ORDER BY columns need not be in select list', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '03', 'Value expressions in ORDER BY clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '04', 'OPEN statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '06', 'Positioned UPDATE statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '07', 'Positioned DELETE statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '08', 'CLOSE statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '10', 'FETCH statement implicit NEXT', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E121', 'Basic cursor support', '17', 'WITH HOLD cursors', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E131', 'Null value support (nulls in lieu of values)', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '01', 'NOT NULL constraints', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '02', 'UNIQUE constraints of NOT NULL columns', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '03', 'PRIMARY KEY constraints', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '04', 'Basic FOREIGN KEY constraint with the NO ACTION default for both referential delete action and referential update action', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '06', 'CHECK constraints', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '07', 'Column defaults', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '08', 'NOT NULL inferred on PRIMARY KEY', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E141', 'Basic integrity constraints', '10', 'Names in a foreign key can be specified in any order', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E151', 'Transaction support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E151', 'Transaction support', '01', 'COMMIT statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E151', 'Transaction support', '02', 'ROLLBACK statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E152', 'Basic SET TRANSACTION statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E152', 'Basic SET TRANSACTION statement', '01', 'SET TRANSACTION statement: ISOLATION LEVEL SERIALIZABLE clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E152', 'Basic SET TRANSACTION statement', '02', 'SET TRANSACTION statement: READ ONLY and READ WRITE clauses', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E153', 'Updatable queries with subqueries', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E161', 'SQL comments using leading double minus', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E171', 'SQLSTATE support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('E182', 'Host language binding', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '01', 'COLUMNS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '02', 'TABLES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '03', 'VIEWS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '04', 'TABLE_CONSTRAINTS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '05', 'REFERENTIAL_CONSTRAINTS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F021', 'Basic information schema', '06', 'CHECK_CONSTRAINTS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '01', 'CREATE TABLE statement to create persistent base tables', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '02', 'CREATE VIEW statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '03', 'GRANT statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '04', 'ALTER TABLE statement: ADD COLUMN clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '13', 'DROP TABLE statement: RESTRICT clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '16', 'DROP VIEW statement: RESTRICT clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F031', 'Basic schema manipulation', '19', 'REVOKE statement: RESTRICT clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F032', 'CASCADE drop behavior', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F033', 'ALTER TABLE statement: DROP COLUMN clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F034', 'Extended REVOKE statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F034', 'Extended REVOKE statement', '01', 'REVOKE statement performed by other than the owner of a schema object', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F034', 'Extended REVOKE statement', '02', 'REVOKE statement: GRANT OPTION FOR clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F034', 'Extended REVOKE statement', '03', 'REVOKE statement to revoke a privilege that the grantee has WITH GRANT OPTION', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '01', 'Inner join (but not necessarily the INNER keyword)', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '02', 'INNER keyword', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '03', 'LEFT OUTER JOIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '04', 'RIGHT OUTER JOIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '05', 'Outer joins can be nested', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '07', 'The inner table in a left or right outer join can also be used in an inner join', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F041', 'Basic joined table', '08', 'All comparison operators are supported (rather than just =)', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '01', 'DATE data type (including support of DATE literal)', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '02', 'TIME data type (including support of TIME literal) with fractional seconds precision of at least 0', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '03', 'TIMESTAMP data type (including support of TIMESTAMP literal) with fractional seconds precision of at least 0 and 6', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '04', 'Comparison predicate on DATE, TIME, and TIMESTAMP data types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '05', 'Explicit CAST between datetime types and character string types', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '06', 'CURRENT_DATE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '07', 'LOCALTIME', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F051', 'Basic date and time', '08', 'LOCALTIMESTAMP', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F052', 'Intervals and datetime arithmetic', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F053', 'OVERLAPS predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F054', 'TIMESTAMP in DATE type precedence list', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F081', 'UNION and EXCEPT in views', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F111', 'Isolation levels other than SERIALIZABLE', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F111', 'Isolation levels other than SERIALIZABLE', '01', 'READ UNCOMMITTED isolation level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F111', 'Isolation levels other than SERIALIZABLE', '02', 'READ COMMITTED isolation level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F111', 'Isolation levels other than SERIALIZABLE', '03', 'REPEATABLE READ isolation level', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F121', 'Basic diagnostics management', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F121', 'Basic diagnostics management', '01', 'GET DIAGNOSTICS statement', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F121', 'Basic diagnostics management', '02', 'SET TRANSACTION statement: DIAGNOSTICS SIZE clause', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F122', 'Enhanced diagnostics management', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F123', 'All diagnostics', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '01', 'WHERE, GROUP BY, and HAVING clauses supported in queries with grouped views', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '02', 'Multiple tables supported in queries with grouped views', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '03', 'Set functions supported in queries with grouped views', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '04', 'Subqueries with GROUP BY and HAVING clauses and grouped views', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F131', 'Grouped operations', '05', 'Single row SELECT with GROUP BY and HAVING clauses and grouped views', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F171', 'Multiple schemas per user', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F181', 'Multiple module support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F191', 'Referential delete actions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F200', 'TRUNCATE TABLE statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F201', 'CAST function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F202', 'TRUNCATE TABLE: identity column restart option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F221', 'Explicit defaults', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F222', 'INSERT statement: DEFAULT VALUES clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F231', 'Privilege tables', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F231', 'Privilege tables', '01', 'TABLE_PRIVILEGES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F231', 'Privilege tables', '02', 'COLUMN_PRIVILEGES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F231', 'Privilege tables', '03', 'USAGE_PRIVILEGES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F251', 'Domain support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F261', 'CASE expression', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F261', 'CASE expression', '01', 'Simple CASE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F261', 'CASE expression', '02', 'Searched CASE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F261', 'CASE expression', '03', 'NULLIF', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F261', 'CASE expression', '04', 'COALESCE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F262', 'Extended CASE expression', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F263', 'Comma-separated predicates in simple CASE expression', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F271', 'Compound character literals', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F281', 'LIKE enhancements', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F291', 'UNIQUE predicate', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F301', 'CORRESPONDING in query expressions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F302', 'INTERSECT table operator', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F302', 'INTERSECT table operator', '01', 'INTERSECT DISTINCT table operator', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F302', 'INTERSECT table operator', '02', 'INTERSECT ALL table operator', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F304', 'EXCEPT ALL table operator', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '01', 'CREATE SCHEMA', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '02', 'CREATE TABLE for persistent base tables', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '03', 'CREATE VIEW', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '04', 'CREATE VIEW: WITH CHECK OPTION', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F311', 'Schema definition statement', '05', 'GRANT statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F312', 'MERGE statement', '', '', 'NO', null, 'consider INSERT ... ON CONFLICT DO UPDATE');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F313', 'Enhanced MERGE statement', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F314', 'MERGE statement with DELETE branch', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F321', 'User authorization', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F341', 'Usage tables', '', '', 'NO', null, 'no ROUTINE_*_USAGE tables');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F361', 'Subprogram support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F381', 'Extended schema manipulation', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F381', 'Extended schema manipulation', '01', 'ALTER TABLE statement: ALTER COLUMN clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F381', 'Extended schema manipulation', '02', 'ALTER TABLE statement: ADD CONSTRAINT clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F381', 'Extended schema manipulation', '03', 'ALTER TABLE statement: DROP CONSTRAINT clause', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F382', 'Alter column data type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F383', 'Set column not null clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F384', 'Drop identity property clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F385', 'Drop column generation expression clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F386', 'Set identity column generation clause', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F391', 'Long identifiers', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F392', 'Unicode escapes in identifiers', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F393', 'Unicode escapes in literals', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F394', 'Optional normal form specification', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F401', 'Extended joined table', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F401', 'Extended joined table', '01', 'NATURAL JOIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F401', 'Extended joined table', '02', 'FULL OUTER JOIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F401', 'Extended joined table', '04', 'CROSS JOIN', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F402', 'Named column joins for LOBs, arrays, and multisets', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F403', 'Partitioned joined tables', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F404', 'Range variable for common column names', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F411', 'Time zone specification', '', '', 'YES', null, 'differences regarding literal interpretation');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F421', 'National character', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '01', 'FETCH with explicit NEXT', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '02', 'FETCH FIRST', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '03', 'FETCH LAST', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '04', 'FETCH PRIOR', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '05', 'FETCH ABSOLUTE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F431', 'Read-only scrollable cursors', '06', 'FETCH RELATIVE', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F441', 'Extended set function support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F442', 'Mixed column references in set functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F451', 'Character set definition', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F461', 'Named character sets', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F471', 'Scalar subquery values', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F481', 'Expanded NULL predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F491', 'Constraint management', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F492', 'Optional table constraint enforcement', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F501', 'Features and conformance views', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F501', 'Features and conformance views', '01', 'SQL_FEATURES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F501', 'Features and conformance views', '02', 'SQL_SIZING view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F502', 'Enhanced documentation tables', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F521', 'Assertions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F531', 'Temporary tables', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F555', 'Enhanced seconds precision', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F561', 'Full value expressions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F571', 'Truth value tests', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F591', 'Derived tables', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F611', 'Indicator data types', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F641', 'Row and table constructors', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F651', 'Catalog name qualifiers', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F661', 'Simple tables', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F671', 'Subqueries in CHECK', '', '', 'NO', null, 'intentionally omitted');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F672', 'Retrospective check constraints', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F673', 'Reads SQL-data routine invocations in CHECK constraints', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F690', 'Collation support', '', '', 'YES', null, 'but no character set support');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F692', 'Extended collation support', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F693', 'SQL-session and client module collations', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F695', 'Translation support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F696', 'Additional translation documentation', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F701', 'Referential update actions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F711', 'ALTER domain', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F721', 'Deferrable constraints', '', '', 'NO', null, 'foreign and unique keys only');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F731', 'INSERT column privileges', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F741', 'Referential MATCH types', '', '', 'NO', null, 'no partial match yet');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F751', 'View CHECK enhancements', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F761', 'Session management', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F762', 'CURRENT_CATALOG', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F763', 'CURRENT_SCHEMA', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F771', 'Connection management', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F781', 'Self-referencing operations', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F791', 'Insensitive cursors', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F801', 'Full set function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F812', 'Basic flagging', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F813', 'Extended flagging', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F821', 'Local table references', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F831', 'Full cursor update', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F831', 'Full cursor update', '01', 'Updatable scrollable cursors', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F831', 'Full cursor update', '02', 'Updatable ordered cursors', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F841', 'LIKE_REGEX predicate', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F842', 'OCCURRENCES_REGEX function', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F843', 'POSITION_REGEX function', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F844', 'SUBSTRING_REGEX function', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F845', 'TRANSLATE_REGEX function', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F846', 'Octet support in regular expression operators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F847', 'Nonconstant regular expressions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F850', 'Top-level <order by clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F851', '<order by clause> in subqueries', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F852', 'Top-level <order by clause> in views', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F855', 'Nested <order by clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F856', 'Nested <fetch first clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F857', 'Top-level <fetch first clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F858', '<fetch first clause> in subqueries', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F859', 'Top-level <fetch first clause> in views', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F860', '<fetch first row count> in <fetch first clause>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F861', 'Top-level <result offset clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F862', '<result offset clause> in subqueries', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F863', 'Nested <result offset clause> in <query expression>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F864', 'Top-level <result offset clause> in views', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F865', '<offset row count> in <result offset clause>', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F866', 'FETCH FIRST clause: PERCENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('F867', 'FETCH FIRST clause: WITH TIES option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('R010', 'Row pattern recognition: FROM clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('R020', 'Row pattern recognition: WINDOW clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('R030', 'Row pattern recognition: full aggregate support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S011', 'Distinct data types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S011', 'Distinct data types', '01', 'USER_DEFINED_TYPES view', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S023', 'Basic structured types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S024', 'Enhanced structured types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S025', 'Final structured types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S026', 'Self-referencing structured types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S027', 'Create method by specific method name', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S028', 'Permutable UDT options list', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S041', 'Basic reference types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S043', 'Enhanced reference types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S051', 'Create table of type', '', '', 'NO', null, 'partially supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S071', 'SQL paths in function and type name resolution', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S081', 'Subtables', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S091', 'Basic array support', '', '', 'NO', null, 'partially supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S091', 'Basic array support', '01', 'Arrays of built-in data types', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S091', 'Basic array support', '02', 'Arrays of distinct types', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S091', 'Basic array support', '03', 'Array expressions', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S092', 'Arrays of user-defined types', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S094', 'Arrays of reference types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S095', 'Array constructors by query', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S096', 'Optional array bounds', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S097', 'Array element assignment', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S098', 'ARRAY_AGG', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S111', 'ONLY in query expressions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S151', 'Type predicate', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S161', 'Subtype treatment', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S162', 'Subtype treatment for references', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S201', 'SQL-invoked routines on arrays', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S201', 'SQL-invoked routines on arrays', '01', 'Array parameters', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S201', 'SQL-invoked routines on arrays', '02', 'Array as result type of functions', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S202', 'SQL-invoked routines on multisets', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S211', 'User-defined cast functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S231', 'Structured type locators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S232', 'Array locators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S233', 'Multiset locators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S241', 'Transform functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S242', 'Alter transform statement', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S251', 'User-defined orderings', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S261', 'Specific type method', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S271', 'Basic multiset support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S272', 'Multisets of user-defined types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S274', 'Multisets of reference types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S275', 'Advanced multiset support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S281', 'Nested collection types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S291', 'Unique constraint on entire row', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S301', 'Enhanced UNNEST', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S401', 'Distinct types based on array types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S402', 'Distinct types based on distinct types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S403', 'ARRAY_MAX_CARDINALITY', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('S404', 'TRIM_ARRAY', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T011', 'Timestamp in Information Schema', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T021', 'BINARY and VARBINARY data types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T022', 'Advanced support for BINARY and VARBINARY data types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T023', 'Compound binary literal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T024', 'Spaces in binary literals', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T031', 'BOOLEAN data type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '01', 'BLOB data type', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '02', 'CLOB data type', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '03', 'POSITION, LENGTH, LOWER, TRIM, UPPER, and SUBSTRING functions for LOB data types', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '04', 'Concatenation of LOB data types', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T041', 'Basic LOB data type support', '05', 'LOB locator: non-holdable', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T042', 'Extended LOB data type support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T043', 'Multiplier T', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T044', 'Multiplier P', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T051', 'Row types', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T053', 'Explicit aliases for all-fields reference', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T061', 'UCS support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T071', 'BIGINT data type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T076', 'DECFLOAT data type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T101', 'Enhanced nullability determination', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T111', 'Updatable joins, unions, and columns', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T121', 'WITH (excluding RECURSIVE) in query expression', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T122', 'WITH (excluding RECURSIVE) in subquery', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T131', 'Recursive query', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T132', 'Recursive query in subquery', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T141', 'SIMILAR predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T151', 'DISTINCT predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T152', 'DISTINCT predicate with negation', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T171', 'LIKE clause in table definition', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T172', 'AS subquery clause in table definition', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T173', 'Extended LIKE clause in table definition', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T174', 'Identity columns', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T175', 'Generated columns', '', '', 'NO', null, 'mostly supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T176', 'Sequence generator support', '', '', 'NO', null, 'supported except for NEXT VALUE FOR');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T177', 'Sequence generator support: simple restart option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T178', 'Identity columns:  simple restart option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T180', 'System-versioned tables', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T181', 'Application-time period tables', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T191', 'Referential action RESTRICT', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T201', 'Comparable data types for referential constraints', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '01', 'Triggers activated on UPDATE, INSERT, or DELETE of one base table', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '02', 'BEFORE triggers', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '03', 'AFTER triggers', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '04', 'FOR EACH ROW triggers', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '05', 'Ability to specify a search condition that must be true before the trigger is invoked', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '06', 'Support for run-time rules for the interaction of triggers and constraints', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '07', 'TRIGGER privilege', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T211', 'Basic trigger capability', '08', 'Multiple triggers for the same event are executed in the order in which they were created in the catalog', 'NO', null, 'intentionally omitted');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T212', 'Enhanced trigger capability', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T213', 'INSTEAD OF triggers', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T231', 'Sensitive cursors', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T241', 'START TRANSACTION statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T251', 'SET TRANSACTION statement: LOCAL option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T261', 'Chained transactions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T271', 'Savepoints', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T272', 'Enhanced savepoint management', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T281', 'SELECT privilege with column granularity', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T285', 'Enhanced derived column names', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T301', 'Functional dependencies', '', '', 'NO', null, 'partially supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T312', 'OVERLAY function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '01', 'User-defined functions with no overloading', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '02', 'User-defined stored procedures with no overloading', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '03', 'Function invocation', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '04', 'CALL statement', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '05', 'RETURN statement', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '06', 'ROUTINES view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T321', 'Basic SQL-invoked routines', '07', 'PARAMETERS view', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T322', 'Declared data type attributes', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T323', 'Explicit security for external routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T324', 'Explicit security for SQL routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T325', 'Qualified SQL parameter references', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T326', 'Table functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T331', 'Basic roles', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T332', 'Extended roles', '', '', 'NO', null, 'mostly supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T341', 'Overloading of SQL-invoked functions and procedures', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T351', 'Bracketed SQL comments (/*...*/ comments)', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T431', 'Extended grouping capabilities', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T432', 'Nested and concatenated GROUPING SETS', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T433', 'Multiargument GROUPING function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T434', 'GROUP BY DISTINCT', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T441', 'ABS and MOD functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T461', 'Symmetric BETWEEN predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T471', 'Result sets return value', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T472', 'DESCRIBE CURSOR', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T491', 'LATERAL derived table', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T495', 'Combined data change and retrieval', '', '', 'NO', null, 'different syntax');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T501', 'Enhanced EXISTS predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T502', 'Period predicates', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T511', 'Transaction counts', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T521', 'Named arguments in CALL statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T522', 'Default values for IN parameters of SQL-invoked procedures', '', '', 'NO', null, 'supported except DEFAULT key word in invocation');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T523', 'Default values for INOUT parameters of SQL-invoked procedures', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X300', 'XMLTable', '', '', 'NO', null, 'XPath 1.0 only');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T524', 'Named arguments in routine invocations other than a CALL statement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T525', 'Default values for parameters of SQL-invoked functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T551', 'Optional key words for default syntax', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T561', 'Holdable locators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T571', 'Array-returning external SQL-invoked functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T572', 'Multiset-returning external SQL-invoked functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T581', 'Regular expression substring function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T591', 'UNIQUE constraints of possibly null columns', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T601', 'Local cursor references', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T611', 'Elementary OLAP operations', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T612', 'Advanced OLAP operations', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T613', 'Sampling', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T614', 'NTILE function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T615', 'LEAD and LAG functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T616', 'Null treatment option for LEAD and LAG functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T617', 'FIRST_VALUE and LAST_VALUE function', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T618', 'NTH_VALUE function', '', '', 'NO', null, 'function exists, but some options missing');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T619', 'Nested window functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T620', 'WINDOW clause: GROUPS option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T621', 'Enhanced numeric functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T622', 'Trigonometric functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T623', 'General logarithm functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T624', 'Common logarithm functions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T625', 'LISTAGG', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T631', 'IN predicate with one list element', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T641', 'Multiple column assignment', '', '', 'NO', null, 'only some syntax variants supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T651', 'SQL-schema statements in SQL routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T652', 'SQL-dynamic statements in SQL routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T653', 'SQL-schema statements in external routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T654', 'SQL-dynamic statements in external routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T655', 'Cyclically dependent routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T811', 'Basic SQL/JSON constructor functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T812', 'SQL/JSON: JSON_OBJECTAGG', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T813', 'SQL/JSON: JSON_ARRAYAGG with ORDER BY', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T814', 'Colon in JSON_OBJECT or JSON_OBJECTAGG', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T821', 'Basic SQL/JSON query operators', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T822', 'SQL/JSON: IS JSON WITH UNIQUE KEYS predicate', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T823', 'SQL/JSON: PASSING clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T824', 'JSON_TABLE: specific PLAN clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T825', 'SQL/JSON: ON EMPTY and ON ERROR clauses', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T826', 'General value expression in ON ERROR or ON EMPTY clauses', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T827', 'JSON_TABLE: sibling NESTED COLUMNS clauses', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T828', 'JSON_QUERY', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T829', 'JSON_QUERY: array wrapper options', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T830', 'Enforcing unique keys in SQL/JSON constructor functions', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T831', 'SQL/JSON path language: strict mode', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T832', 'SQL/JSON path language: item method', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T833', 'SQL/JSON path language: multiple subscripts', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T834', 'SQL/JSON path language: wildcard member accessor', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T835', 'SQL/JSON path language: filter expressions', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T836', 'SQL/JSON path language: starts with predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T837', 'SQL/JSON path language: regex_like predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T838', 'JSON_TABLE: PLAN DEFAULT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('T839', 'Formatted cast of datetimes to/from character strings', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M001', 'Datalinks', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M002', 'Datalinks via SQL/CLI', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M003', 'Datalinks via Embedded SQL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M004', 'Foreign data support', '', '', 'NO', null, 'partially supported');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M005', 'Foreign schema support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M006', 'GetSQLString routine', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M007', 'TransmitRequest', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M009', 'GetOpts and GetStatistics routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M010', 'Foreign data wrapper support', '', '', 'NO', null, 'different API');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M011', 'Datalinks via Ada', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M012', 'Datalinks via C', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M013', 'Datalinks via COBOL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M014', 'Datalinks via Fortran', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M015', 'Datalinks via M', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M016', 'Datalinks via Pascal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M017', 'Datalinks via PL/I', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M018', 'Foreign data wrapper interface routines in Ada', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M019', 'Foreign data wrapper interface routines in C', '', '', 'NO', null, 'different API');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M020', 'Foreign data wrapper interface routines in COBOL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M021', 'Foreign data wrapper interface routines in Fortran', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M022', 'Foreign data wrapper interface routines in MUMPS', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M023', 'Foreign data wrapper interface routines in Pascal', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M024', 'Foreign data wrapper interface routines in PL/I', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M030', 'SQL-server foreign data support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('M031', 'Foreign data wrapper general routines', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X010', 'XML type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X011', 'Arrays of XML type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X012', 'Multisets of XML type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X013', 'Distinct types of XML type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X014', 'Attributes of XML type', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X015', 'Fields of XML type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X016', 'Persistent XML values', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X020', 'XMLConcat', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X025', 'XMLCast', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X030', 'XMLDocument', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X031', 'XMLElement', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X032', 'XMLForest', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X034', 'XMLAgg', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X035', 'XMLAgg: ORDER BY option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X036', 'XMLComment', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X037', 'XMLPI', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X038', 'XMLText', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X040', 'Basic table mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X041', 'Basic table mapping: nulls absent', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X042', 'Basic table mapping: null as nil', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X043', 'Basic table mapping: table as forest', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X044', 'Basic table mapping: table as element', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X045', 'Basic table mapping: with target namespace', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X046', 'Basic table mapping: data mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X047', 'Basic table mapping: metadata mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X048', 'Basic table mapping: base64 encoding of binary strings', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X049', 'Basic table mapping: hex encoding of binary strings', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X050', 'Advanced table mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X051', 'Advanced table mapping: nulls absent', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X052', 'Advanced table mapping: null as nil', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X053', 'Advanced table mapping: table as forest', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X054', 'Advanced table mapping: table as element', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X055', 'Advanced table mapping: with target namespace', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X056', 'Advanced table mapping: data mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X057', 'Advanced table mapping: metadata mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X058', 'Advanced table mapping: base64 encoding of binary strings', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X059', 'Advanced table mapping: hex encoding of binary strings', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X060', 'XMLParse: character string input and CONTENT option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X061', 'XMLParse: character string input and DOCUMENT option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X065', 'XMLParse: BLOB input and CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X066', 'XMLParse: BLOB input and DOCUMENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X068', 'XMLSerialize: BOM', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X069', 'XMLSerialize: INDENT', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X070', 'XMLSerialize: character string serialization and CONTENT option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X071', 'XMLSerialize: character string serialization and DOCUMENT option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X072', 'XMLSerialize: character string serialization', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X073', 'XMLSerialize: BLOB serialization and CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X074', 'XMLSerialize: BLOB serialization and DOCUMENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X075', 'XMLSerialize: BLOB serialization', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X076', 'XMLSerialize: VERSION', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X077', 'XMLSerialize: explicit ENCODING option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X078', 'XMLSerialize: explicit XML declaration', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X080', 'Namespaces in XML publishing', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X081', 'Query-level XML namespace declarations', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X082', 'XML namespace declarations in DML', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X083', 'XML namespace declarations in DDL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X084', 'XML namespace declarations in compound statements', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X085', 'Predefined namespace prefixes', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X086', 'XML namespace declarations in XMLTable', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X090', 'XML document predicate', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X091', 'XML content predicate', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X096', 'XMLExists', '', '', 'NO', null, 'XPath 1.0 only');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X100', 'Host language support for XML: CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X101', 'Host language support for XML: DOCUMENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X110', 'Host language support for XML: VARCHAR mapping', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X111', 'Host language support for XML: CLOB mapping', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X112', 'Host language support for XML: BLOB mapping', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X113', 'Host language support for XML: STRIP WHITESPACE option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X114', 'Host language support for XML: PRESERVE WHITESPACE option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X120', 'XML parameters in SQL routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X121', 'XML parameters in external routines', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X131', 'Query-level XMLBINARY clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X132', 'XMLBINARY clause in DML', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X133', 'XMLBINARY clause in DDL', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X134', 'XMLBINARY clause in compound statements', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X135', 'XMLBINARY clause in subqueries', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X141', 'IS VALID predicate: data-driven case', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X142', 'IS VALID predicate: ACCORDING TO clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X143', 'IS VALID predicate: ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X144', 'IS VALID predicate: schema location', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X145', 'IS VALID predicate outside check constraints', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X151', 'IS VALID predicate with DOCUMENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X152', 'IS VALID predicate with CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X153', 'IS VALID predicate with SEQUENCE option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X155', 'IS VALID predicate: NAMESPACE without ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X157', 'IS VALID predicate: NO NAMESPACE with ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X160', 'Basic Information Schema for registered XML Schemas', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X161', 'Advanced Information Schema for registered XML Schemas', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X170', 'XML null handling options', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X171', 'NIL ON NO CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X181', 'XML(DOCUMENT(UNTYPED)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X182', 'XML(DOCUMENT(ANY)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X190', 'XML(SEQUENCE) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X191', 'XML(DOCUMENT(XMLSCHEMA)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X192', 'XML(CONTENT(XMLSCHEMA)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X200', 'XMLQuery', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X201', 'XMLQuery: RETURNING CONTENT', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X202', 'XMLQuery: RETURNING SEQUENCE', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X203', 'XMLQuery: passing a context item', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X204', 'XMLQuery: initializing an XQuery variable', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X205', 'XMLQuery: EMPTY ON EMPTY option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X206', 'XMLQuery: NULL ON EMPTY option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X211', 'XML 1.1 support', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X221', 'XML passing mechanism BY VALUE', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X222', 'XML passing mechanism BY REF', '', '', 'NO', null, 'parser accepts BY REF but ignores it; passing is always BY VALUE');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X231', 'XML(CONTENT(UNTYPED)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X232', 'XML(CONTENT(ANY)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X241', 'RETURNING CONTENT in XML publishing', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X242', 'RETURNING SEQUENCE in XML publishing', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X251', 'Persistent XML values of XML(DOCUMENT(UNTYPED)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X252', 'Persistent XML values of XML(DOCUMENT(ANY)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X253', 'Persistent XML values of XML(CONTENT(UNTYPED)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X254', 'Persistent XML values of XML(CONTENT(ANY)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X255', 'Persistent XML values of XML(SEQUENCE) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X256', 'Persistent XML values of XML(DOCUMENT(XMLSCHEMA)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X257', 'Persistent XML values of XML(CONTENT(XMLSCHEMA)) type', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X260', 'XML type: ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X261', 'XML type: NAMESPACE without ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X263', 'XML type: NO NAMESPACE with ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X264', 'XML type: schema location', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X271', 'XMLValidate: data-driven case', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X272', 'XMLValidate: ACCORDING TO clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X273', 'XMLValidate: ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X274', 'XMLValidate: schema location', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X281', 'XMLValidate with DOCUMENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X282', 'XMLValidate with CONTENT option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X283', 'XMLValidate with SEQUENCE option', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X284', 'XMLValidate: NAMESPACE without ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X286', 'XMLValidate: NO NAMESPACE with ELEMENT clause', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X301', 'XMLTable: derived column list option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X302', 'XMLTable: ordinality column option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X303', 'XMLTable: column default option', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X304', 'XMLTable: passing a context item', '', '', 'YES', null, 'must be XML DOCUMENT');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X305', 'XMLTable: initializing an XQuery variable', '', '', 'NO', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X400', 'Name and identifier mapping', '', '', 'YES', null, '');
INSERT INTO information_schema.sql_features (feature_id, feature_name, sub_feature_id, sub_feature_name, is_supported, is_verified_by, comments) VALUES ('X410', 'Alter column data type: XML type', '', '', 'YES', null, '');